(* A simple NFT P2P marketplace contract *)

(***************************************************)
(*                 Scilla version                  *)
(***************************************************)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils PairUtils IntUtils ListUtils
library NonfungibleToken

(* Operations to add and subtract *)
type Operation =
| Add
| Sub

(* Global variables *)
let zero = Uint256 0
let one = Uint256 1
let true = True
let add_operation = Add
let sub_operation = Sub

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
      let msgs_tmp = one_msg msg2 in
      Cons {Message} msg1 msgs_tmp

(* If token balance is non-zero returns balance otherwise returns Uint128 0 *)
let get_bal =
  fun (some_bal: Option Uint256) =>
    match some_bal with
    | Some bal => bal
    | None => zero
    end

let build_pair =
  fun (input_to_address : ByStr20) =>
  fun (input_nft_uri : String) =>
    Pair {ByStr20 String} input_to_address input_nft_uri

(* Error exception *)
type Error =
  | CodeNotContractOwner
  | CodeIsSelf
  | CodeNFTExists
  | CodeNotApproved
  | CodeNotNFTOwner
  | CodeNotFound
  | CodeContractHasExpired
  | CodeCannotCloseContractInThisPhase
  | CodeContractHasNotExpired

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner                => Int32 -1
      | CodeIsSelf                          => Int32 -2
      | CodeNFTExists                       => Int32 -3
      | CodeNotApproved                     => Int32 -4
      | CodeNotNFTOwner                     => Int32 -5
      | CodeNotFound                        => Int32 -6
      | CodeContractHasExpired              => Int32 -7
      | CodeCannotCloseContractInThisPhase  => Int32 -8
      | CodeContractHasNotExpired           => Int32 -9
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract NonFungibleToken 
(
  owner: ByStr20,
  nft_name: String,
  nft_symbol: String
)

(* Mutuable fields *)

(* Mapping between NFT_id to NFT_owner *)
field nft_owners: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping from owner to number of owned nfts *)
field owned_nft_count: Map ByStr20 Uint256 = Emp ByStr20 Uint256

(* Mapping from nft_id to nft_uri *)
(* A nft uri contains the description, image attributes, url etc. of the nft *)
field nft_uri: Map Uint256 String = Emp Uint256 String

(* Total token count *)
field total_supply: Uint256 = Uint256 0

(* Used nft id *)
field nft_id_count: Uint256 = Uint256 0

(* PROCEDURES *)

(* Error Message alert *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsSelf(address_a: ByStr20, address_b: ByStr20)
  is_self = builtin eq address_a address_b;
  match is_self with
  | False =>
  | True =>
    err = CodeIsSelf;
    ThrowError err
  end
end

(* To check if address is owner of the NFT *)
procedure IsNFTOwner(nft_id: Uint256, address: ByStr20)
  some_nft_owner <- nft_owners[nft_id];
  match some_nft_owner with
  | Some addr => 
    is_nft_owner = builtin eq addr address;
    match is_nft_owner with
    | True =>
    | False =>
      err = CodeNotNFTOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

(* Updates the count of tokens to an address *)
procedure UpdateTokenCount(operation: Operation, address: ByStr20)
  match operation with
  | Add =>
    some_to_count <- owned_nft_count[address];
    new_to_count = 
      let current_count = get_bal some_to_count in
      builtin add current_count one;
    owned_nft_count[address] := new_to_count
  | Sub =>
    some_from_count <- owned_nft_count[address];
    new_from_count = 
      let current_count = get_bal some_from_count in
        let is_zero = builtin eq current_count zero in
          match is_zero with
          | True => zero
          | False => builtin sub current_count one
          end;
    owned_nft_count[address] := new_from_count
  end
end

(* Procedures to check validity of smart contract *)
procedure CheckBlock()*)
 don't check if contract status is already expired, cancelled, or nulled
(*  current_status <- contract_status;*)
(*  is_already_expired = builtin eq current_status contract_is_expired_status;*)
(*  is_null = builtin eq current_status contract_is_null_status;*)
(*  is_cancelled = builtin eq current_status contract_is_cancelled_status;*)
(*  is_expired_or_null = orb is_already_expired is_null;*)
(*  is_any = orb is_cancelled is_expired_or_null;*)
(*  match is_any with*)
(*    | True =>*)
(*    | False =>*)
(*      blk <- & BLOCKNUMBER;*)
(*      is_expired = builtin blt expiration_block blk;*)
(*      match is_expired with*)
(*        | True =>*)
(*          (* check if there is enough liquidity *)*)
(*          current_total_supply <- total_supply;*)
(*          price <- current_price;*)
(*          received_zil = builtin div current_total_supply price;*)
(*          zil_with_interest_times_hundred = builtin mul received_zil interest_ratio;*)
(*          zil_with_interest = builtin div zil_with_interest_times_hundred hundred;*)
(*          bal <- _balance;*)
(*          is_liquidity_enough = uint128_le zil_with_interest bal;*)
(*          match is_liquidity_enough with*)
(*            | True =>*)
(*              contract_status := contract_is_expired_status*)
(*            | False =>*)
(*              contract_status := contract_is_null_status*)
(*          end*)
(*        | False =>*)
(*      end*)
(*  end*)
(*end*)

(*(* Procedures to check validity of smart contract *)*)
(*procedure ContractIsNotExpired()*)
(*  CheckBlock;*)
(*  current_status <- contract_status;*)
(*  is_expired = builtin eq current_status contract_is_expired_status;*)
(*  is_null = builtin eq current_status contract_is_null_status;*)
(*  is_any = orb is_expired is_null;*)
(*  match is_any with*)
(*    | True =>*)
(*      err = CodeContractHasExpired;*)
(*      ThrowError err*)
(*    | False =>*)
(*  end*)
(*end*)

(*(* Procedures to check validity of smart contract *)*)
(*procedure ContractIsExpiredOrNull()*)
(*  current_status <- contract_status;*)
(*  is_expired = builtin eq current_status contract_is_expired_status;*)
(*  is_null = builtin eq current_status contract_is_null_status;*)
(*  is_any = orb is_expired is_null;*)
(*  match is_any with*)
(*    | True =>*)
(*    | False =>*)
(*      err = CodeContractHasNotExpired;*)
(*      ThrowError err*)
(*  end*)
(*end*)
(**)
(*Procedures to check validity of smart contract*)
(*procedure CanCloseContract()*)
(*  current_status <- contract_status;*)
(*  is_not_started = builtin eq current_status contract_is_not_started_status;*)
(*  is_active = builtin eq current_status contract_is_active_status;*)
(*  is_any = orb is_not_started is_active;*)
(*  match is_any with*)
(*    | True =>*)
(*    | False =>*)
(*      err = CodeCannotCloseContractInThisPhase;*)
(*      ThrowError err*)
(*  end*)
(*end

(* To get number of nft's assgined to an address *)
transition BalanceOf(address: ByStr20)
    some_bal <- owned_nft_count[address]; (* In place check to get number of Owned nft's from Map at address *)
    balance = get_bal some_bal;
    msg_to_sender = { _tag : "BalanceOfCallBack"; _recipient : _sender; _amount : Uint128 0;
                   balance : balance};
    msgs = one_msg msg_to_sender;
    send msgs
end

(* @dev: Get name of the NFTs *)
transition Name()
  msg_to_sender = { _tag : "NameCallBack"; _recipient : _sender; _amount : Uint128 0; 
                  name : nft_name};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Get Symbol of the nfts *)
transition Symbol()
  msg_to_sender = { _tag : "SymbolCallBack"; _recipient : _sender; _amount : Uint128 0;
                  symbol : nft_symbol};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Get the nft_uri of a certain nft_id *)
transition GetnftURI(nft_id: Uint256)
    some_nft_uri <- nft_uri[nft_id];
    match some_nft_uri with
    | Some nft_uri =>
        msg_to_sender = { _tag : "GetTokenURICallBack"; _recipient : _sender; _amount : Uint128 0; 
                      nft_uri : nft_uri};
        msgs = one_msg msg_to_sender;
        send msgs
    | None =>
        err = CodeNotFound;
        ThrowError err
    end
end

(* Check if a nft_id is owned by a nft_owner *)
transition ChecknftOwner(nft_id: Uint256, address: ByStr20)   
  IsNFTOwner nft_id address;
  msg_to_sender = { _tag : "IsNFTOwnerCallBack"; _recipient : _sender; _amount : Uint128 0};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Transfer NFT from Owner to buyer *)
transition Transfer(buyer: ByStr20, nft_id: Uint256)
  IsSelf buyer _sender;
  IsNFTOwner nft_id _sender;
  (* Change nft_owner for that nft_id *)
  nft_owners[nft_id] := buyer;
  (* Subtract one from previous token owner count *)
  UpdateTokenCount sub_operation _sender;
  (* Add one to the new token owner count *)
  UpdateTokenCount add_operation buyer;
  e = {_eventname: "TransferSuccess"; from: _sender; recipient: buyer; nft_id: nft_id};
  event e;
  msg_to_recipient = { _tag : "RecipientAcceptTransfer"; _recipient : buyer; _amount : Uint128 0; 
                      from : _sender; recipient : buyer; nft_id : nft_id };
  msg_to_sender = { _tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                    from : _sender; recipient : buyer; nft_id : nft_id };
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end